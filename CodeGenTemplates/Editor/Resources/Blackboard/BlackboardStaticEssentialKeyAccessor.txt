        protected static <BLACKBOARD-KEY-TYPE> s_<BLACKBOARD-KEY-NAME>;
        protected bool m_<BLACKBOARD-KEY-NAME>Changed;

        public static <BLACKBOARD-ACTUAL-KEY-TYPE> Static<BLACKBOARD-KEY-NAME>
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => <BLACKBOARD-KEY-UNMANAGED-TO-ACTUAL>(s_<BLACKBOARD-KEY-NAME>);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                var actualValue = <BLACKBOARD-KEY-ACTUAL-TO-UNMANAGED>(value);
                if (s_<BLACKBOARD-KEY-NAME><BLACKBOARD-KEY-EQUALITY-COMPARER>(actualValue))
                {
                    return;
                }

                s_<BLACKBOARD-KEY-NAME> = actualValue;

                foreach (var component in s_ActiveComponents)
                {
                    component.m_<BLACKBOARD-KEY-NAME>Changed = true;
                }
            }
        }

        public <BLACKBOARD-ACTUAL-KEY-TYPE> <BLACKBOARD-KEY-NAME>
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Static<BLACKBOARD-KEY-NAME>;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<BLACKBOARD-KEY-NAME>(<BLACKBOARD-ACTUAL-KEY-TYPE> value, bool expected = false)
        {
            if (expected)
            {
                Unregister(this);
                Static<BLACKBOARD-KEY-NAME> = value;
                Register(this);
            }
            else
            {
                Static<BLACKBOARD-KEY-NAME> = value;
            }
        }